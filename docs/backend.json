{
  "entities": {
    "Family": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Family",
      "type": "object",
      "description": "Represents a family account within the Memora application.",
      "properties": {
        "familyId": {
          "type": "string",
          "description": "Unique identifier for the Family entity."
        },
        "familyName": {
          "type": "string",
          "description": "The name of the family (e.g., 'The Smiths')."
        },
        "adminId": {
          "type": "string",
          "description": "Reference to User who is the administrator of this family. (Relationship: User 1:N Family)"
        },
        "memberIds": {
          "type": "array",
          "description": "References to Users who are members of this family. (Relationship: Family 1:N User)",
          "items": {
            "type": "string"
          }
        },
        "subscriptionTier": {
          "type": "string",
          "description": "The subscription tier of the family ('free' or 'premium')."
        }
      },
      "required": [
        "familyId",
        "familyName",
        "adminId",
        "memberIds",
        "subscriptionTier"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Memora application.",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Unique identifier for the User entity. This corresponds to the Firebase Auth UID."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "The user's display name."
        },
        "familyId": {
          "type": "string",
          "description": "Reference to Family the user belongs to. (Relationship: Family 1:N User)"
        }
      },
      "required": [
        "userId",
        "email",
        "displayName",
        "familyId"
      ]
    },
    "Story": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Story",
      "type": "object",
      "description": "Represents a family story within the Memora application.",
      "properties": {
        "storyId": {
          "type": "string",
          "description": "Unique identifier for the Story entity."
        },
        "familyId": {
          "type": "string",
          "description": "Reference to the Family to which this story belongs. (Relationship: Family 1:N Story)"
        },
        "title": {
          "type": "string",
          "description": "The title of the story."
        },
        "narrator": {
          "type": "string",
          "description": "The name of the family member narrating the story."
        },
        "audioUrl": {
          "type": "string",
          "description": "URL of the audio file in Firebase Storage."
        },
        "transcription": {
          "type": "string",
          "description": "The text transcription of the story."
        },
        "status": {
          "type": "string",
          "description": "The status of the story ('uploading', 'transcribing', 'completed')."
        },
        "associatedPhotoUrl": {
          "type": "string",
          "description": "URL of the associated photo in Firebase Storage."
        },
        "isDonated": {
          "type": "boolean",
          "description": "Indicates whether the story has been donated to Estudia Memora."
        }
      },
      "required": [
        "storyId",
        "familyId",
        "title",
        "narrator",
        "audioUrl",
        "transcription",
        "status",
        "associatedPhotoUrl",
        "isDonated"
      ]
    },
    "MemoraBox": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MemoraBox",
      "type": "object",
      "description": "Represents a physical Memora Box device.",
      "properties": {
        "boxId": {
          "type": "string",
          "description": "Unique identifier for the MemoraBox entity. This is the hardware ID of the box."
        },
        "familyId": {
          "type": "string",
          "description": "Reference to the Family to which this box is linked. (Relationship: Family 1:N MemoraBox)"
        },
        "pairingCode": {
          "type": "string",
          "description": "Temporary 6-digit code for pairing the box."
        },
        "status": {
          "type": "string",
          "description": "The status of the box ('pending_pairing', 'active')."
        }
      },
      "required": [
        "boxId",
        "familyId",
        "pairingCode",
        "status"
      ]
    },
    "DonatedStory": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "DonatedStory",
      "type": "object",
      "description": "Represents a story donated to the Estudia Memora community.",
      "properties": {
        "donatedStoryId": {
          "type": "string",
          "description": "Unique identifier for the DonatedStory entity."
        },
        "storyId": {
          "type": "string",
          "description": "Reference to the original Story. (Relationship: Story 1:1 DonatedStory, optional)"
        },
        "anonTranscription": {
          "type": "string",
          "description": "The anonymized text of the story."
        }
      },
      "required": [
        "donatedStoryId",
        "storyId",
        "anonTranscription"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.  The 'userId' corresponds to the Firebase Auth UID.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            }
          ]
        }
      },
      {
        "path": "/families/{familyId}",
        "definition": {
          "entityName": "Family",
          "schema": {
            "$ref": "#/backend/entities/Family"
          },
          "description": "Stores family account information.",
          "params": [
            {
              "name": "familyId",
              "description": "Unique identifier for the family."
            }
          ]
        }
      },
      {
        "path": "/families/{familyId}/stories/{storyId}",
        "definition": {
          "entityName": "Story",
          "schema": {
            "$ref": "#/backend/entities/Story"
          },
          "description": "Stores stories associated with a family. Includes denormalized 'familyId' for authorization independence. Potentially includes denormalized 'subscriptionTier' from the parent Family.",
          "params": [
            {
              "name": "familyId",
              "description": "The ID of the family that owns the story."
            },
            {
              "name": "storyId",
              "description": "Unique identifier for the story."
            }
          ]
        }
      },
      {
        "path": "/memoraBoxes/{boxId}",
        "definition": {
          "entityName": "MemoraBox",
          "schema": {
            "$ref": "#/backend/entities/MemoraBox"
          },
          "description": "Stores information about Memora Box devices.",
          "params": [
            {
              "name": "boxId",
              "description": "Unique identifier for the Memora Box (hardware ID)."
            }
          ]
        }
      },
      {
        "path": "/donatedStories/{donatedStoryId}",
        "definition": {
          "entityName": "DonatedStory",
          "schema": {
            "$ref": "#/backend/entities/DonatedStory"
          },
          "description": "Stores anonymized stories donated to the Estudia Memora community.",
          "params": [
            {
              "name": "donatedStoryId",
              "description": "Unique identifier for the donated story."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure is designed to support the \"Memora\" application, prioritizing security, scalability, and debuggability as per the defined principles. The key strategy is Authorization Independence achieved through denormalization of authorization-related data. This eliminates the need for `get()` calls in security rules, enabling atomic operations and simplifying debugging. Structural Segregation is applied to maintain homogeneous security postures within collections.\n\nSpecifically:\n\n*   **Users and Families:** User and family data are stored in separate collections. When a user creates a family, the `familyId` is updated in the user document, establishing the relationship. The `subscriptionTier` is stored in the family document.\n*   **Stories:** Stories are stored within a subcollection of families (`/families/{familyId}/stories/{storyId}`). This enforces ownership based on the `familyId` and allows for efficient querying of stories belonging to a specific family. The `familyId` and potentially the `subscriptionTier` are denormalized into each story document to avoid authorization `get()` calls.\n*   **MemoraBoxes:** The `memoraBoxes` collection stores information about the physical Memora Box devices. The `familyId` is updated when a box is paired, linking the box to a specific family. The `pairingCode` ensures secure pairing.\n*   **DonatedStories:** Donated stories are stored in a separate collection (`/donatedStories/{donatedStoryId}`). Each document references the original story's ID. This segregation simplifies access control for public consumption.\n\nQAPs (Rules are not Filters) are supported by the segregation of data based on access needs. For example, only members of a family can list stories within that family's subcollection. The `donatedStories` collection enables listing of publicly available (anonymized) stories.\n\nAuthorization Independence:\n\n*   The `stories` subcollection includes the `familyId` field, which is denormalized from the parent `families` document. This allows security rules to validate access based on the user's `familyId` without requiring a `get()` call to the `families` document.\n*   The decision to place `stories` as a subcollection of `families` rather than a top-level collection is specifically intended to leverage path-based authorization. This provides the best security posture. If the `stories` collection was placed at the top-level, the security rules would be far more complex as the rules would have to validate whether the requesting user is a member of the family that owns the story.\n*   If other family attributes are needed for authorization (e.g., `subscriptionTier`), these should be denormalized into the `stories` documents.\n\nThis structure provides a clear separation of concerns, enabling straightforward and robust security rules that can be easily debugged and maintained."
  }
}