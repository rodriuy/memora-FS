/**
 * @fileoverview Firestore Security Rules for the Memora application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user and family-centric security model. Users can only
 * access their own profile data, and families control access to stories and MemoraBoxes.
 * Authorization independence is achieved via data denormalization, avoiding costly `get()` calls.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, with 'userId' matching the Firebase Auth UID.
 * - /families/{familyId}: Stores family account information, including subscription tier and member lists.
 * - /families/{familyId}/stories/{storyId}: Stores stories associated with each family.
 * - /memoraBoxes/{boxId}: Stores Memora Box device information.
 * - /donatedStories/{donatedStoryId}: Stores anonymized stories for public access.
 *
 * Key Security Decisions:
 * - User data is private and accessible only to the authenticated user.
 * - Families manage their own stories and linked MemoraBoxes.
 * - Public read access is granted only to the /donatedStories collection.
 * - Denormalization is used to avoid `get()` calls and simplify rules.
 * - List operations are generally restricted to owners, except for the publicly readable `donatedStories`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - If the user is authenticated and the userId in the path matches the authenticated user's UID.
     * @allow (get, update, delete) - If the user is authenticated and the userId in the path matches the authenticated user's UID.
     * @deny (create) - If the userId in the request does not match the authenticated user's UID.
     * @deny (get, update, delete) - If the userId in the request does not match the authenticated user's UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Secure family accounts.
     * @path /families/{familyId}
     * @allow (create) - This rule prevents arbitrary family creation. Families are created as a side effect of user creation.
     * @allow (get, update, delete) - If the user is the admin of the family.
     * @deny (create) - Always deny direct creation of families.
     * @deny (get, update, delete) - If the user is not the admin of the family.
     * @principle Enforces admin-only access for family management.
     */
    match /families/{familyId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin(familyId) {
        return isSignedIn() && get(/databases/$(database)/documents/families/$(familyId)).data.adminId == request.auth.uid;
      }

      allow get: if isSignedIn() && isAdmin(familyId);
      allow list: if false;
      allow create: if false;
      allow update: if isSignedIn() && isAdmin(familyId);
      allow delete: if isSignedIn() && isAdmin(familyId);
    }

    /**
     * @description Secure stories within a family.
     * @path /families/{familyId}/stories/{storyId}
     * @allow (get, list) - If the user is a member of the family.
     * @allow (create, update, delete) - If the user is a member of the family.
     * @deny (create, update, delete) - If the user is not a member of the family.
     * @principle Enforces family-based ownership for stories.
     */
    match /families/{familyId}/stories/{storyId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isFamilyMember(familyId) {
        return isSignedIn() && get(/databases/$(database)/documents/families/$(familyId)).data.memberIds.hasAny([request.auth.uid]);
      }

      allow get: if isSignedIn() && isFamilyMember(familyId);
      allow list: if isSignedIn() && isFamilyMember(familyId);
      allow create: if isSignedIn() && isFamilyMember(familyId) && request.resource.data.familyId == familyId;
      allow update: if isSignedIn() && isFamilyMember(familyId) && resource.data.familyId == familyId;
      allow delete: if isSignedIn() && isFamilyMember(familyId) && resource.data.familyId == familyId;
    }

    /**
     * @description Secure MemoraBox devices.
     * @path /memoraBoxes/{boxId}
     * @allow (get, list) - This rule may need adjusting based on who should be able to list memoraBoxes. Currently denied.
     * @allow (create, update, delete) - If the user is the admin of the family that owns the box.
     * @deny (create, update, delete) - If the user is not the admin of the family that owns the box.
     * @principle Enforces family-based ownership for MemoraBoxes.
     */
    match /memoraBoxes/{boxId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdminOfFamily(boxId) {
        let familyId = get(/databases/$(database)/documents/memoraBoxes/$(boxId)).data.familyId;
        return isSignedIn() && get(/databases/$(database)/documents/families/$(familyId)).data.adminId == request.auth.uid;
      }

      allow get: if isSignedIn() && isAdminOfFamily(boxId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.pairingCode is string;
      allow update: if isSignedIn() && isAdminOfFamily(boxId) && resource != null;
      allow delete: if isSignedIn() && isAdminOfFamily(boxId) && resource != null;
    }

    /**
     * @description Secure donated stories. Public read, admin-only write.
     * @path /donatedStories/{donatedStoryId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - This rule is a placeholder; adjust based on how donated stories are managed. Currently denies all writes.
     * @principle Allows public read access to anonymized stories, restricts write access.
     */
    match /donatedStories/{donatedStoryId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Implement admin-only write access if needed.
    }
  }
}