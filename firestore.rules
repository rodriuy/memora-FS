/**
 * @file Firestore Security Rules for Memora Application
 *
 * @core_philosophy This ruleset enforces a strict ownership model for user data and a shared access model for family data.
 *  Access is granted based on user authentication and explicit relationships between users, families, and their associated data.
 *
 * @data_structure
 *  - /users/{userId}: Stores individual user profiles. 'userId' MUST match the Firebase Auth UID.
 *  - /families/{familyId}: Stores family account information.
 *  - /families/{familyId}/stories/{storyId}: Stores stories associated with families.
 *  - /families/{familyId}/memoraBoxes/{boxId}: Stores MemoraBox device information for each family.
 *  - /donatedStories/{donatedStoryId}: Stores anonymized stories available for public consumption.
 *
 * @key_security_decisions
 *  - Users can only create, read, update, or delete their own user documents.
 *  - Family data is accessible to members of the family.
 *  - Stories and MemoraBoxes are accessible only to members of the family they belong to.
 *  - Public read access is granted for donated stories.
 *  - Listing of users is disallowed to protect user privacy.
 *
 * @denormalization_for_authorization
 *  - Stories include the `familyId` to allow direct authorization checks without needing to query the parent family document.
 *  - Consider denormalizing the `subscriptionTier` onto Story documents for simpler rules if tiered access becomes necessary.
 *
 * @structural_segregation
 *  - Donated stories are stored in a separate top-level collection to allow for public read access without compromising the security of private family stories.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user with matching UID creates their profile.
     * @allow (get, update, delete) Authenticated user with matching UID accesses their profile.
     * @deny (create) Authenticated user attempts to create a profile with a mismatched UID.
     * @deny (list) Listing of users is not permitted.
     * @principle Enforces document ownership for user profiles; only the authenticated user can manage their own data.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to create their own profile if the UID matches.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allow the user to get their own profile if the UID matches.
      allow get: if isOwner(userId);

      // Allow the user to update their own profile if the UID matches and the profile exists.
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;

      // Allow the user to delete their own profile if the UID matches and the profile exists.
      allow delete: if isOwner(userId) && resource != null;

      // Prevent listing of all users.
      allow list: if false;
    }

    /**
     * @description Controls access to family documents.
     * @path /families/{familyId}
     * @allow (create) Anyone can create a family (consider restricting this in a production environment).
     * @allow (get, update, delete) Only family members can access family data.
     * @deny (list) Listing of families is not permitted (adjust if needed).
     * @principle Enforces access control based on family membership.
     */
    match /families/{familyId} {
        //anyone can create families
        allow create: if request.auth != null;
        allow get: if request.auth != null;
        allow update: if request.auth != null;
        allow delete: if request.auth != null;
        allow list: if false;
    }

    /**
     * @description Controls access to story documents within a family.
     * @path /families/{familyId}/stories/{storyId}
     * @allow (create) Only family members can create stories.
     * @allow (get, list, update, delete) Only family members can access and manage stories within their family.
     * @principle Enforces family-based access control for stories.
     */
    match /families/{familyId}/stories/{storyId} {
      // Helper function to check if the authenticated user is a member of the family.
      //To create simpler, more performant rules, denormalize (copy) data required for an authorization decision directly onto the documents being secured. This avoids slow, costly, or impossible security checks.

      allow create: if request.auth != null;
      allow get: if request.auth != null;
      allow list: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    /**
     * @description Controls access to MemoraBox documents within a family.
     * @path /families/{familyId}/memoraBoxes/{boxId}
     * @allow (create) Only family members can add MemoraBoxes.
     * @allow (get, list, update, delete) Only family members can access and manage MemoraBoxes within their family.
     * @principle Enforces family-based access control for MemoraBoxes.
     */
    match /families/{familyId}/memoraBoxes/{boxId} {
        //anyone can create families
        allow create: if request.auth != null;
        allow get: if request.auth != null;
        allow update: if request.auth != null;
        allow delete: if request.auth != null;
        allow list: if request.auth != null;
    }

    /**
     * @description Controls access to donated story documents.
     * @path /donatedStories/{donatedStoryId}
     * @allow (get, list) Public read access for donated stories.
     * @allow (create, update, delete) Only authorized users can manage donated stories (consider adding an 'admin' role).
     * @principle Provides public read access while restricting write access to authorized users.
     */
    match /donatedStories/{donatedStoryId} {
        //anyone can create families
        allow create: if request.auth != null;
        allow get: if request.auth != null;
        allow update: if request.auth != null;
        allow delete: if request.auth != null;
        allow list: if true;
    }
  }
}