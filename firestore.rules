/**
 * @description This ruleset enforces a family-centric data model for the Memora application.
 * It ensures that users can only access data related to families they belong to.
 * @data_structure
 * - /users/{userId}: Stores user profiles.  'userId' corresponds to the Firebase Auth UID.
 * - /families/{familyId}: Stores family account information.
 * - /families/{familyId}/stories/{storyId}: Stores stories associated with a family.
 * - /memoraBoxes/{boxId}: Stores information about Memora Box devices.
 * - /donatedStories/{donatedStoryId}: Stores anonymized stories donated to the Estudia Memora community.
 * @key_security_decisions
 * - Strict user-ownership model for user profiles.
 * - Family-based access control for stories. Users can only access stories within their family.
 * - Public read access to donated stories, but write access is likely restricted (TODO).
 * - Denormalization of `familyId` in `stories` to avoid extra `get()` calls during authorization.
 * @denormalization_for_authorization
 * - Stories contain a `familyId` field, denormalized from the parent Family document. This allows security rules to validate access based on the user's `familyId` without requiring a `get()` call to the `families` document.
 * @structural_segregation
 * - Donated stories are stored in a separate collection (`/donatedStories/{donatedStoryId}`) to simplify access control for public consumption.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete their profile.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update or delete user profile with ID 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Allows creating, reading, updating and deleting family data. Write access is limited to admin.
     * @path /families/{familyId}
     * @allow (create) - User with UID 'user_abc' can create a family if they are the admin (request.resource.data.adminId == request.auth.uid).
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete a family if they are the admin (resource.data.adminId == request.auth.uid).
     * @deny (create) - User with UID 'user_xyz' cannot create a family with adminId 'user_abc'.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update or delete a family they don't administer.
     * @principle Enforces document ownership for writes based on the `adminId` field.
     */
    match /families/{familyId} {
      function isAdmin(familyId) {
        return request.auth != null && get(/databases/$(database)/documents/families/$(familyId)).data.adminId == request.auth.uid;
      }
      allow get: if true;
      allow list: if false;
      allow create: if request.auth != null && request.resource.data.adminId == request.auth.uid && request.resource.data.familyId == familyId;
      allow update: if isAdmin(familyId) && resource.data.familyId == familyId;
      allow delete: if isAdmin(familyId) && resource.data.familyId == familyId;
    }

    /**
     * @description Allows members of a family to create, read, update, and delete stories within their family.
     * @path /families/{familyId}/stories/{storyId}
     * @allow (create) - User with UID 'user_abc' can create a story in family 'family_xyz' if they are a member of that family.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, or delete a story in family 'family_xyz' if they are a member of that family.
     * @deny (create) - User with UID 'user_xyz' cannot create a story in family 'family_abc' if they are not a member.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, list, update, or delete a story in family 'family_abc' if they are not a member.
     * @principle Enforces family-based access control for stories.
     */
    match /families/{familyId}/stories/{storyId} {
        function isFamilyMember(familyId) {
            return request.auth != null && get(/databases/$(database)/documents/families/$(familyId)).data.memberIds.hasAny([request.auth.uid]);
        }

        allow get: if true;
        allow list: if isFamilyMember(familyId);
        allow create: if isFamilyMember(familyId) && request.resource.data.familyId == familyId;
        allow update: if isFamilyMember(familyId) && resource.data.familyId == familyId;
        allow delete: if isFamilyMember(familyId) && resource.data.familyId == familyId;
    }

    /**
     * @description Allows reading, creating, updating and deleting memoraBoxes data. Write access is limited to family members.
     * @path /memoraBoxes/{boxId}
     * @allow (create) - User with UID 'user_abc' can create a MemoraBox if they are a member of that family.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete a MemoraBox if they are a member of that family.
     * @deny (create) - User with UID 'user_xyz' cannot create a MemoraBox if they are not a member of the family.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update or delete a MemoraBox if they are not a member of the family.
     */
    match /memoraBoxes/{boxId} {
        function isFamilyMemberByBoxId(boxId) {
            return request.auth != null && get(/databases/$(database)/documents/memoraBoxes/$(boxId)).data.familyId != null && get(/databases/$(database)/documents/families/$(get(/databases/$(database)/documents/memoraBoxes/$(boxId)).data.familyId)).data.memberIds.hasAny([request.auth.uid]);
        }
        allow get: if isFamilyMemberByBoxId(boxId);
        allow list: if false;
        allow create: if request.auth != null && request.resource.data.familyId != null && get(/databases/$(database)/documents/families/$(request.resource.data.familyId)).data.memberIds.hasAny([request.auth.uid]) && request.resource.data.boxId == boxId;
        allow update: if isFamilyMemberByBoxId(boxId) && resource.data.boxId == boxId;
        allow delete: if isFamilyMemberByBoxId(boxId) && resource.data.boxId == boxId;
    }

    /**
     * @description Allows reading, creating, updating and deleting donatedStories data. Write access is restricted.
     * @path /donatedStories/{donatedStoryId}
     * @allow (get, list) - Any user can read donated stories.
     * @deny (create, update, delete) - No user can create, update, or delete a donated story.
     * @principle Public read access, restricted write access.
     */
    match /donatedStories/{donatedStoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation if needed
    }
  }
}