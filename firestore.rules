rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Funciones Helper ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Verifica si el usuario pertenece a una familia específica
    function isFamilyMember(familyId) {
      // Lee el familyId del PROPIO documento del usuario y lo compara con el de la ruta.
      // Esto es más eficiente y seguro.
      let userFamilyId = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId;
      return isSignedIn() && userFamilyId == familyId;
    }

    // Verifica si el usuario es administrador de una familia específica
    function isAdmin(familyId) {
      // Lee el documento de la familia para obtener el adminId
      let familyAdminId = get(/databases/$(database)/documents/families/$(familyId)).data.adminId;
      return isSignedIn() && request.auth.uid == familyAdminId;
    }

    // Verifica si el usuario que hace la solicitud es miembro de la misma familia que el recurso solicitado
    function isMemberOfSameFamilyAsResource() {
      let requesterFamilyId = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId;
      let resourceFamilyId = resource.data.familyId; // Asume que el recurso (otro usuario) tiene un campo familyId
      return isSignedIn() && requesterFamilyId != null && requesterFamilyId == resourceFamilyId;
    }

    // Valida la estructura básica de un documento de usuario
    function isValidUserDocument(userData) {
      return userData.id == request.auth.uid // ID debe coincidir
          && userData.email is string
          && userData.displayName is string
          && (userData.familyId == null || userData.familyId is string) // familyId puede ser null o string
          && (!('createdAt' in userData) || userData.createdAt is timestamp) // Opcional al crear, timestamp si existe
          && (!('bio' in userData) || userData.bio is string || userData.bio == null) // Opcional
          && (!('avatarId' in userData) || userData.avatarId is string || userData.avatarId == null) // Opcional
          && (!('avatarUrl' in userData) || userData.avatarUrl is string || userData.avatarUrl == null); // Opcional
    }

    // Valida la estructura básica de un documento de familia
    function isValidFamilyDocument(familyData) {
      return familyData.familyName is string && familyData.familyName.size() > 0
          && familyData.adminId is string && familyData.adminId == request.auth.uid // Al crear, el admin es quien crea
          && familyData.memberIds is list && familyData.memberIds.size() == 1 && request.auth.uid in familyData.memberIds // Al crear, solo el admin es miembro
          && familyData.subscriptionTier is string && (familyData.subscriptionTier == 'free' || familyData.subscriptionTier == 'premium')
          && (!('createdAt' in familyData) || familyData.createdAt is timestamp); // Opcional al crear
    }

     // Valida la estructura básica de un documento de historia
    function isValidStoryDocument(storyData, familyId) {
       return storyData.familyId == familyId // Debe pertenecer a la familia correcta
          && storyData.title is string
          && storyData.narrator is string
          && storyData.audioUrl is string // Puede estar vacío inicialmente
          && storyData.transcription is string // Puede estar vacío inicialmente
          && storyData.status is string && storyData.status in ['uploading', 'transcribing', 'completed', 'failed']
          && storyData.isDonated is bool
          && (!('imageId' in storyData) || storyData.imageId is string) // Opcional
          && (!('createdAt' in storyData) || storyData.createdAt is timestamp); // Opcional al crear
    }

     // Valida la estructura básica de un documento de MemoraBox
    function isValidMemoraBoxDocument(boxData, familyId) {
      return boxData.familyId == familyId
          && boxData.status is string && boxData.status in ['active', 'pending_pairing'] // 'pending_pairing' probablemente se maneje en otra colección/backend
          && boxData.boxId is string // Asumimos que se asigna un ID a la caja
          && (!('pairedAt' in boxData) || boxData.pairedAt is timestamp); // Opcional
    }

    // --- Reglas ---

    match /users/{userId} {
      allow get: if isOwner(userId) || isMemberOfSameFamilyAsResource(); // Permitir ver perfiles de la misma familia
      allow list: if false; // Nadie puede listar todos los usuarios
      allow create: if isOwner(userId) && isValidUserDocument(request.resource.data);
      allow update: if isOwner(userId)
                      && request.resource.data.id == resource.data.id // No cambiar ID
                      && request.resource.data.email == resource.data.email // No cambiar email (usualmente)
                      && isValidUserDocument(request.resource.data); // Validar campos actualizados
      allow delete: if isOwner(userId);
    }

    match /families/{familyId} {
      allow get: if isFamilyMember(familyId); // Solo miembros pueden leer detalles de su familia
      allow list: if false; // Nadie puede listar todas las familias
      allow create: if isSignedIn() && isValidFamilyDocument(request.resource.data);
      allow update: if isAdmin(familyId);
      allow delete: if isAdmin(familyId); // Solo el admin puede borrar
    }

    match /families/{familyId}/stories {
      allow list: if isFamilyMember(familyId);
    }

    match /families/{familyId}/stories/{storyId} {
      allow get: if isFamilyMember(familyId); // Solo miembros leen historias de su familia
      allow create: if isFamilyMember(familyId) && isValidStoryDocument(request.resource.data, familyId);
      allow update: if isAdmin(familyId) && isValidStoryDocument(request.resource.data, familyId); // Solo admin edita (o podrías permitir isFamilyMember aquí)
      allow delete: if isAdmin(familyId); // Solo admin borra
    }

    match /families/{familyId}/memoraBoxes {
      allow list: if isFamilyMember(familyId);
    }

    match /families/{familyId}/memoraBoxes/{boxId} {
      allow get: if isFamilyMember(familyId); // Solo miembros ven las cajas de su familia
      // La creación/vinculación real podría necesitar lógica de backend/functions
      // Esta regla asume que el admin las añade manualmente o a través de una función segura
      allow create: if isAdmin(familyId) && isValidMemoraBoxDocument(request.resource.data, familyId);
      allow update: if isAdmin(familyId) && isValidMemoraBoxDocument(request.resource.data, familyId);
      allow delete: if isAdmin(familyId);
    }

    match /donatedStories/{donatedStoryId} {
      allow get, list: if true; // Lectura pública permitida
      // SOLO permitir creación desde un backend seguro (ej: Cloud Function)
      // Esto previene que usuarios malintencionados creen entradas falsas.
      // Esta regla asume que tu backend se autentica con una cuenta de servicio.
      allow create: if request.auth.token.firebase.sign_in_provider == 'cloud_identity';
      // Nadie puede actualizar o borrar desde el cliente
      allow update, delete: if false;
    }
  }
}