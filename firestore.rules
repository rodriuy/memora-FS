/**
 * @fileoverview Firestore Security Rules for the Memora application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user and family-centric security model. Users can only
 * manage their own data and data within their assigned family. Families control access to
 * stories and MemoraBoxes. Donated stories are publicly readable.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /families/{familyId}: Stores family account information.
 * - /families/{familyId}/stories/{storyId}: Stores stories associated with families.
 * - /memoraBoxes/{boxId}: Stores information about Memora Box devices.
 * - /donatedStories/{donatedStoryId}: Stores anonymized stories donated to the Estudia Memora community.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Families manage their own data.
 * - Stories are owned by families, and only family members can manage them.
 * - MemoraBoxes are linked to families.
 * - Donated stories are publicly readable but only the application can create, update or delete.
 * - Listing all users or families is disallowed to prevent enumeration.
 *
 * Denormalization for Authorization:
 * - Stories denormalize `familyId` to allow direct authorization checks without `get()` calls.
 *
 * Structural Segregation:
 * - Donated stories are in a separate top-level collection to allow public read access without
 *   compromising the security of private family stories.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles. Only the authenticated user can manage their own profile.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' with ID 'user_abc' can create their own profile.
     * @allow (get, update, delete) User 'user_abc' with ID 'user_abc' can read, update, and delete their own profile.
     * @deny (create) User 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (get, update, delete) User 'user_xyz' cannot read, update, or delete the profile of user 'user_abc'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures family accounts. Allows admins and members to read the account, and only the admin to modify
     * @path /families/{familyId}
     * @allow (create) User 'user_abc' can create a family if they are the admin.
     * @allow (get, update, delete) User 'user_abc' can read, update, and delete a family if they are the admin.
     * @deny (create) User 'user_xyz' cannot create a family if they are not the admin.
     * @deny (get, update, delete) User 'user_xyz' cannot read, update, or delete a family if they are not the admin.
     * @principle Enforces document ownership for families.
     */
    match /families/{familyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin(familyId) {
        return get(/databases/$(database)/documents/families/$(familyId)).data.adminId == request.auth.uid;
      }

      function isMember(familyId) {
        return request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
      }

      function isExistingAdmin(familyId) {
        return isAdmin(familyId) && existsAfter(/databases/$(database)/documents/families/$(familyId));
      }

      allow get: if isSignedIn() && (isAdmin(familyId) || isMember(familyId));
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.adminId == request.auth.uid;
      allow update: if isSignedIn() && isExistingAdmin(familyId);
      allow delete: if isSignedIn() && isExistingAdmin(familyId);
    }

    /**
     * @description Secures stories associated with a family. Only family members can manage stories.
     * @path /families/{familyId}/stories/{storyId}
     * @allow (create) User 'user_abc' can create a story within family 'family_abc' if they are a member of the family.
     * @allow (get, update, delete) User 'user_abc' can read, update, and delete a story within family 'family_abc' if they are a member of the family.
     * @deny (create) User 'user_xyz' cannot create a story within family 'family_abc' if they are not a member of the family.
     * @deny (get, update, delete) User 'user_xyz' cannot read, update, or delete a story within family 'family_abc' if they are not a member of the family.
     * @principle Enforces family ownership for stories.
     */
    match /families/{familyId}/stories/{storyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isFamilyMember(familyId) {
        return request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
      }

      function isExistingFamilyMember(familyId) {
        return isFamilyMember(familyId) && existsAfter(/databases/$(database)/documents/families/$(familyId)/stories/$(storyId));
      }

      allow get: if isSignedIn() && isFamilyMember(familyId);
      allow list: if isSignedIn() && isFamilyMember(familyId);
      allow create: if isSignedIn() && isFamilyMember(familyId);
      allow update: if isSignedIn() && isExistingFamilyMember(familyId);
      allow delete: if isSignedIn() && isExistingFamilyMember(familyId);
    }

    /**
     * @description Secures Memora Box devices. Only the linked family can manage the device.
     * @path /memoraBoxes/{boxId}
     * @allow (create) User 'user_abc' can create a memoraBox if they are a member of the family.
     * @allow (get, update, delete) User 'user_abc' can read, update, and delete a memoraBox if they are a member of the family.
     * @deny (create) User 'user_xyz' cannot create a memoraBox if they are not a member of the family.
     * @deny (get, update, delete) User 'user_xyz' cannot read, update, or delete a memoraBox if they are not a member of the family.
     * @principle Enforces family ownership for Memora Boxes.
     */
    match /memoraBoxes/{boxId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isFamilyMember(familyId) {
        return request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
      }

      function isExistingFamilyMember(boxId) {
        return get(/databases/$(database)/documents/memoraBoxes/$(boxId)).data.familyId != null && existsAfter(/databases/$(database)/documents/memoraBoxes/$(boxId));
      }

      allow get: if isSignedIn() && isFamilyMember(resource.data.familyId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.familyId != null && isFamilyMember(request.resource.data.familyId);
      allow update: if isSignedIn() && isExistingFamilyMember(boxId);
      allow delete: if isSignedIn() && isExistingFamilyMember(boxId);
    }

    /**
     * @description Secures donated stories. Allows public read access but restricts write access to the application.
     * @path /donatedStories/{donatedStoryId}
     * @allow (get, list) Any user can read the donated stories.
     * @deny (create, update, delete) No user can create, update, or delete a donated story.
     * @principle Allows public read access to donated stories while restricting write access.
     */
    match /donatedStories/{donatedStoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}