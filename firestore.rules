/**
 * @file Firestore Security Rules for Memora Application
 *
 * @core_philosophy: This ruleset enforces a strict user-ownership and family-based access model.
 *  Users can only manage their own profiles. Families control access to stories and MemoraBoxes.
 *  Donated stories are publicly readable but only writable by authorized processes.
 * @data_structure:
 *  - /users/{userId}: User profiles, accessible only by the user themselves.
 *  - /families/{familyId}: Family data, no direct access defined in this ruleset.
 *  - /families/{familyId}/stories/{storyId}: Stories belonging to a family, accessible by family members.
 *  - /families/{familyId}/memoraBoxes/{boxId}: MemoraBox device data, accessible by family members.
 *  - /donatedStories/{donatedStoryId}: Publicly readable, owner-writable collection of donated stories.
 * @key_security_decisions:
 *  - Users can only manage their own user document, preventing unauthorized profile modifications.
 *  - Listing of users is disallowed to prevent information leakage.
 *  - Stories and MemoraBoxes are secured via path-based authorization under the /families/{familyId} collection.
 *  - Donated stories are publicly readable, enabling community access to anonymized content.
 * @denormalization_for_authorization:
 *  - Stories documents may contain a denormalized `familyId` and `subscriptionTier` to avoid `get()` calls for authorization.
 * @structural_segregation:
 *  - Donated stories are stored in a separate collection (/donatedStories) to allow public read access without compromising the security of private family stories.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile.
     *   `request.auth.uid == 'user_abc'` and `request.resource.data.userId == 'user_abc'`
     * @allow (get, update, delete) User with UID 'user_abc' can get, update, or delete their own profile.
     *   `request.auth.uid == 'user_abc'`
     * @deny (create) User with UID 'user_abc' cannot create a profile for another user 'user_xyz'.
     *   `request.auth.uid == 'user_abc'` and `request.resource.data.userId == 'user_xyz'`
     * @deny (get, update, delete) User with UID 'user_abc' cannot get, update, or delete profile for another user 'user_xyz'.
     *   `request.auth.uid == 'user_xyz'`
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.userId == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages family data.  No direct read/write access for users defined in this ruleset.
     * @path /families/{familyId}
     * @allow NONE
     * @deny Any operation.
     * @principle Access to family data is managed indirectly via subcollections.
     */
    match /families/{familyId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages stories associated with a family. Family members can create, read, update, and delete stories within their family.
     * @path /families/{familyId}/stories/{storyId}
     * @allow (create) User with UID 'user_abc' can create a story in family 'family_xyz' if they are a member.
     *   `request.auth.uid in get(/databases/$(database)/documents/families/family_xyz).data.memberIds` and `request.resource.data.familyId == 'family_xyz'`
     * @allow (get, list, update, delete) User with UID 'user_abc' can get, list, update or delete a story in family 'family_xyz' if they are a member.
     *   `request.auth.uid in get(/databases/$(database)/documents/families/family_xyz).data.memberIds`
     * @deny (create) User with UID 'user_abc' cannot create a story in family 'family_xyz' if they are NOT a member.
     *   `request.auth.uid not in get(/databases/$(database)/documents/families/family_xyz).data.memberIds` and `request.resource.data.familyId == 'family_xyz'`
     * @deny (get, list, update, delete) User with UID 'user_abc' cannot get, list, update, or delete a story in family 'family_xyz' if they are NOT a member.
     *   `request.auth.uid not in get(/databases/$(database)/documents/families/family_xyz).data.memberIds`
     * @principle Enforces family-based access control.
     */
    match /families/{familyId}/stories/{storyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isFamilyMember(familyId) {
        return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
      }

      function isExistingFamilyMember(familyId) {
        return isFamilyMember(familyId) && resource != null;
      }

      allow get: if isFamilyMember(familyId);
      allow list: if isFamilyMember(familyId);
      allow create: if isFamilyMember(familyId) && request.resource.data.familyId == familyId;
      allow update: if isExistingFamilyMember(familyId) && request.resource.data.familyId == familyId;
      allow delete: if isExistingFamilyMember(familyId);
    }

    /**
     * @description Manages MemoraBox devices associated with a family. Family members can create, read, update, and delete MemoraBoxes within their family.
     * @path /families/{familyId}/memoraBoxes/{boxId}
     * @allow (create) User with UID 'user_abc' can create a MemoraBox in family 'family_xyz' if they are a member.
     *   `request.auth.uid in get(/databases/$(database)/documents/families/family_xyz).data.memberIds`
     * @allow (get, list, update, delete) User with UID 'user_abc' can get, list, update, or delete a MemoraBox in family 'family_xyz' if they are a member.
     *   `request.auth.uid in get(/databases/$(database)/documents/families/family_xyz).data.memberIds`
     * @deny (create) User with UID 'user_abc' cannot create a MemoraBox in family 'family_xyz' if they are NOT a member.
     *   `request.auth.uid not in get(/databases/$(database)/documents/families/family_xyz).data.memberIds`
     * @deny (get, list, update, delete) User with UID 'user_abc' cannot get, list, update, or delete a MemoraBox in family 'family_xyz' if they are NOT a member.
     *   `request.auth.uid not in get(/databases/$(database)/documents/families/family_xyz).data.memberIds`
     * @principle Enforces family-based access control.
     */
    match /families/{familyId}/memoraBoxes/{boxId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isFamilyMember(familyId) {
        return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
      }

      function isExistingFamilyMember(familyId) {
        return isFamilyMember(familyId) && resource != null;
      }

      allow get: if isFamilyMember(familyId);
      allow list: if isFamilyMember(familyId);
      allow create: if isFamilyMember(familyId);
      allow update: if isExistingFamilyMember(familyId);
      allow delete: if isExistingFamilyMember(familyId);
    }

    /**
     * @description Manages publicly readable, owner-writable donated stories.
     * @path /donatedStories/{donatedStoryId}
     * @allow (get, list) Any user can read donated stories.
     * @allow (create, update, delete) Only authorized processes can create, update, and delete donated stories.
     * @deny (create, update, delete) Unauthenticated users cannot create, update, or delete donated stories.
     * @principle Provides public read access to donated stories while restricting write access.
     */
    match /donatedStories/{donatedStoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add logic for authorized processes.
    }
  }
}