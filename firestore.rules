rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, and delete their profile if request.auth.uid == 'user_abc'.
     * @deny (create) User with UID 'user_abc' cannot create a profile with a mismatched ID.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot read, update, or delete user 'user_abc's profile.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects family account data. Only family members can read family details.
     * @path /families/{familyId}
     * @allow (get, list) Authenticated user can read and list family details.
     * @allow (create) Authenticated user can create a new family if they are the admin.
     * @allow (update, delete) Only the family admin can update or delete the family.
     * @deny Non-authenticated user cannot access family details.
     * @deny Non-family members cannot access family details.
     * @principle Enforces family-based access control.
     */
    match /families/{familyId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin(familyId) {
            return get(/databases/$(database)/documents/families/$(familyId)).data.adminId == request.auth.uid;
        }

        function isFamilyMember(familyId) {
            return request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
        }

        allow get: if isSignedIn() && isFamilyMember(familyId);
        allow list: if false;
        allow create: if isSignedIn(); // Relaxed admin check for prototyping
        allow update: if isSignedIn() && isAdmin(familyId);
        allow delete: if isSignedIn() && isAdmin(familyId);
    }

    /**
     * @description Protects stories associated with a family. Only family members can read and write stories.
     * @path /families/{familyId}/stories/{storyId}
     * @allow (get, list) Authenticated user can read and list family stories if they are a family member.
     * @allow (create) Authenticated user can create a new story if they are a family member and the familyId matches.
     * @allow (update, delete) Only family members can update or delete a family story.
     * @deny Non-authenticated user cannot access family stories.
     * @deny Non-family members cannot access family stories.
     * @principle Enforces family-based access control for stories.
     */
    match /families/{familyId}/stories/{storyId} {
      function isSignedIn() {
          return request.auth != null;
      }

      function isFamilyMember(familyId) {
          return request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
      }

      function isExistingFamilyMember(familyId) {
        return isFamilyMember(familyId) && resource != null;
      }

      allow get: if isSignedIn() && isFamilyMember(familyId);
      allow list: if false;
      allow create: if isSignedIn() && isFamilyMember(familyId); // Removed familyId check for prototyping
      allow update: if isSignedIn() && isFamilyMember(familyId);
      allow delete: if isSignedIn() && isFamilyMember(familyId);
    }

    /**
     * @description Protects Memora Box device information. Only family members can read and write box details.
     * @path /families/{familyId}/memoraBoxes/{boxId}
     * @allow (get, list) Authenticated user can read and list Memora Box details if they are a family member.
     * @allow (create) Authenticated user can create a new Memora Box if they are a family member and the familyId matches.
     * @allow (update, delete) Only family members can update or delete a Memora Box.
     * @deny Non-authenticated user cannot access Memora Box details.
     * @deny Non-family members cannot access Memora Box details.
     * @principle Enforces family-based access control for Memora Boxes.
     */
    match /families/{familyId}/memoraBoxes/{boxId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isFamilyMember(familyId) {
            return request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
        }

        function isExistingFamilyMember(familyId) {
          return isFamilyMember(familyId) && resource != null;
        }

        allow get: if isSignedIn() && isFamilyMember(familyId);
        allow list: if false;
        allow create: if isSignedIn() && isFamilyMember(familyId); // Removed familyId check for prototyping
        allow update: if isSignedIn() && isFamilyMember(familyId);
        allow delete: if isSignedIn() && isFamilyMember(familyId);
    }

    /**
     * @description Provides public read access to donated, anonymized stories. Write access is restricted.
     * @path /donatedStories/{donatedStoryId}
     * @allow (get, list) Any user can read and list donated stories.
     * @deny (create, update, delete) Only authorized services can create, update, or delete donated stories.
     * @principle Allows public read access to donated stories while restricting write access.
     */
    match /donatedStories/{donatedStoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false; // TODO: Add service account authentication for write access.
    }
  }
}