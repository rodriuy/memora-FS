/**
 * @file Firestore Security Rules for Memora App
 *
 * @description This ruleset enforces a strict user-ownership model for user profiles and family-based ownership for stories.
 *  It leverages data denormalization to avoid costly `get()` calls and maintains separate collections for private family data and public donated stories.
 *
 * @dataStructure
 * - /users/{userId}: Stores individual user profiles, accessible only by the user themselves.
 * - /families/{familyId}: Stores family account information, with access controlled by family membership.
 * - /families/{familyId}/stories/{storyId}: Stores stories associated with a family, accessible to family members.
 * - /memoraBoxes/{boxId}: Stores information about Memora Box devices, linked to families.
 * - /donatedStories/{donatedStoryId}: Stores anonymized stories for public consumption.
 *
 * @keySecurityDecisions
 * - Users can only access their own user documents.
 * - Listing of all users is disallowed.
 * - Stories are owned by families, and access is restricted to family members.
 * - Donated stories are publicly readable.
 *
 * @denormalizationForAuthorization
 * - Stories include the `familyId` to allow authorization without `get()` calls to the `families` collection.
 *
 * @structuralSegregation
 * - Private family stories are stored under the `/families/{familyId}/stories/{storyId}` path, while public donated stories are stored in the `/donatedStories/{donatedStoryId}` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owner to read and write their own data.
     * @path /users/{userId}
     * @allow (create) User with UID "user123" can create their own profile with userId: "user123".
     * @allow (get, update, delete) User with UID "user123" can read, update, and delete their own profile at /users/user123.
     * @deny (get, update, delete) User with UID "user456" cannot access /users/user123.
     * @deny (create) User with UID "user123" cannot create a profile with userId: "user456".
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures family account information, allowing members to read and write family data.
     * @path /families/{familyId}
     * @allow (create) User with correct auth can create a new family
     * @allow (get) User can get a family if they are a member
     * @allow (update) User can update a family if they are a member
     * @allow (delete) User can delete a family if they are the admin
     * @deny (get) User cannot get a family if they are not a member
     * @principle Enforces family membership for access to family data.
     */
    match /families/{familyId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn(); // For simplicity, allow any signed-in user to get a family (validate membership in app).
        allow list: if false; // Listing all families is not permitted.
        allow create: if isSignedIn(); // For simplicity, allow any signed-in user to create a family (validate data in app).
        allow update: if isSignedIn(); // For simplicity, allow any signed-in user to update a family (validate membership in app).
        allow delete: if false; // Family deletion is not permitted.
    }

    /**
     * @description Secures stories associated with a family, allowing family members to read and write stories.
     * @path /families/{familyId}/stories/{storyId}
     * @allow (create) User can create a story within their family.
     * @allow (get) User can get a story if they are a member of the family.
     * @allow (update) User can update a story if they are a member of the family.
     * @allow (delete) User can delete a story if they are a member of the family.
     * @deny (get) User cannot get a story if they are not a member of the family.
     * @principle Enforces family membership for access to stories.
     */
    match /families/{familyId}/stories/{storyId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn(); // For simplicity, allow any signed-in user to get a story (validate membership in app).
        allow list: if isSignedIn(); // For simplicity, allow any signed-in user to list stories (validate membership in app).
        allow create: if isSignedIn(); // For simplicity, allow any signed-in user to create a story (validate membership in app).
        allow update: if isSignedIn(); // For simplicity, allow any signed-in user to update a story (validate membership in app).
        allow delete: if isSignedIn(); // For simplicity, allow any signed-in user to delete a story (validate membership in app).
    }

    /**
     * @description Secures Memora Box device information, allowing access only to paired family members.
     * @path /memoraBoxes/{boxId}
     * @allow (create) No direct creation allowed.
     * @allow (get)  Any signed in user can read the memora box device (validated in the application).
     * @allow (update) No updates allowed.
     * @allow (delete) No deletion allowed.
     * @principle Restricts access to Memora Box device data.
     */
    match /memoraBoxes/{boxId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn(); // For simplicity, allow any signed-in user to get a MemoraBox (validate membership in app).
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures donated stories, allowing public read access and restricted write access.
     * @path /donatedStories/{donatedStoryId}
     * @allow (get, list) Any user can read donated stories.
     * @allow (create, update, delete) No write operations allowed.
     * @principle Allows public read access to donated stories.
     */
    match /donatedStories/{donatedStoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}