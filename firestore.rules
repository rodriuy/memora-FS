/**
 * @fileoverview Firestore Security Rules for the Memora application.
 *
 * Core Philosophy:
 * This ruleset enforces a family-centric access control model. Users can only access and modify data
 * associated with their family. Stories are owned by families, and access to MemoraBoxes is also
 * controlled at the family level. Donated stories are publicly readable, but write access is restricted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /families/{familyId}: Stores family account information.
 * - /families/{familyId}/stories/{storyId}: Stores stories associated with a family.
 * - /memoraBoxes/{boxId}: Stores information about Memora Box devices.
 * - /donatedStories/{donatedStoryId}: Stores anonymized stories donated to the Estudia Memora community.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user document.
 * - Families can only be created and managed by their admin.
 * - Stories are owned by families and can only be accessed by family members.
 * - MemoraBoxes are linked to families and can only be accessed by family members.
 * - Donated stories are publicly readable but only writable by a trusted process (not defined here).
 * - Listing all users is disallowed, as is listing all families.
 *
 * Denormalization for Authorization:
 * - Stories contain a denormalized 'familyId' to simplify authorization checks and avoid `get()` calls.
 * - Future: Potentially denormalize 'subscriptionTier' into stories for tier-based access control.
 *
 * Structural Segregation:
 * - Donated stories are stored in a separate collection to allow for public read access without compromising
 *   the security of family-specific stories.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user document.
     * @path /users/{userId}
     * @allow (create) - A user can create their own document if the userId matches their auth UID.
     * @allow (get, update, delete) - A user can get, update, and delete their own document.
     * @deny (create) - A user cannot create a document with a userId that doesn't match their auth UID.
     * @deny (get, update, delete) - A user cannot get, update, or delete another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows creation of families, and restricts modifications and deletion.
     * @path /families/{familyId}
     * @allow (create) - A user can create a family if they are the admin.
     * @deny (get, list, update, delete) - Only authorized processes can manage families.
     * @principle Enforces admin-only management of families.
     */
    match /families/{familyId} {
        allow get: if false;
        allow list: if false;
        allow create: if request.auth.uid == request.resource.data.adminId;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Allows family members to read and write stories within their family.
     * @path /families/{familyId}/stories/{storyId}
     * @allow (get, list) - Any authenticated user can retrieve stories for a specific family.
     * @allow (create) - A family member can create a story for their family.
     * @allow (update, delete) - Only family members can update/delete stories, must exist first.
     * @deny (create) - A user cannot create a story for a family they are not a member of.
     * @deny (update, delete) - A user cannot update/delete a story for a family they are not a member of.
     * @principle Enforces family-based access control for stories.
     */
    match /families/{familyId}/stories/{storyId} {
      function isFamilyMember(familyId) {
          return get(/databases/$(database)/documents/families/$(familyId)).data.memberIds.hasAny([request.auth.uid]);
      }

      allow get: if isFamilyMember(familyId);
      allow list: if isFamilyMember(familyId);
      allow create: if isFamilyMember(familyId) && request.resource.data.familyId == familyId;
      allow update: if isFamilyMember(familyId) && request.resource.data.familyId == familyId && resource != null;
      allow delete: if isFamilyMember(familyId) && request.resource.data.familyId == familyId && resource != null;
    }

    /**
     * @description Allows access to MemoraBox data only to family members.
     * @path /memoraBoxes/{boxId}
     * @allow (get) - A family member can get a MemoraBox if the box belongs to their family.
     * @allow (list) - Listing MemoraBoxes is not permitted.
     * @allow (create) - A family member can create a MemoraBox if they are the admin.
     * @allow (update, delete) - Only family members can update/delete MemoraBoxes, must exist first.
     * @deny (create) - A user cannot create a MemoraBox for a family they are not a member of.
     * @deny (update, delete) - A user cannot update/delete a MemoraBox for a family they are not a member of.
     * @principle Enforces family-based access control for MemoraBoxes.
     */
    match /memoraBoxes/{boxId} {
      function isFamilyMemberByBoxId(boxId) {
        let familyId = get(/databases/$(database)/documents/memoraBoxes/$(boxId)).data.familyId;
        return get(/databases/$(database)/documents/families/$(familyId)).data.memberIds.hasAny([request.auth.uid]);
      }

      allow get: if isFamilyMemberByBoxId(boxId);
      allow list: if false;
      allow create: if request.auth.uid == get(/databases/$(database)/documents/families/$(request.resource.data.familyId)).data.adminId && request.resource.data.familyId == get(/databases/$(database)/documents/families/$(request.resource.data.familyId)).data.familyId;
      allow update: if isFamilyMemberByBoxId(boxId) && resource != null;
      allow delete: if isFamilyMemberByBoxId(boxId) && resource != null;
    }

    /**
     * @description Allows public read access to donated stories, but restricts write access.
     * @path /donatedStories/{donatedStoryId}
     * @allow (get, list) - Anyone can read donated stories.
     * @deny (create, update, delete) - Only authorized processes can manage donated stories.
     * @principle Enables public read access for donated content.
     */
    match /donatedStories/{donatedStoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}