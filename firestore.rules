/**
 * @fileOverview Firestore Security Rules for the Memora application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user and family data ownership.  Users can only
 * read and write their own profile data. Families can manage their own stories
 * and Memora Boxes. Public listing of users is disallowed.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /families/{familyId}: Stores family account information.
 * - /families/{familyId}/stories/{storyId}: Stores stories for each family.
 * - /families/{familyId}/memoraBoxes/{boxId}: Stores Memora Box device data.
 * - /donatedStories/{donatedStoryId}: Stores anonymized donated stories.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Users can only create their own user document (self-creation).
 * - Families manage stories and boxes.
 * - Donated stories are publicly readable.
 *
 * Denormalization for Authorization:
 *  - The `User` entity has a `familyId` field to determine the family a user belongs to, which simplifies rules for stories and boxes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Ensures only the authenticated user can manage their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID matching auth UID can create their profile.
     * @allow (get, update, delete) User with ID matching auth UID can get, update, or delete their profile.
     * @deny (create) User with ID not matching auth UID cannot create a profile.
     * @deny (list) Listing users is not allowed.
     * @deny (update, delete) User with ID not matching auth UID cannot update or delete a profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if request.auth != null;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts family management to family members, particularly the admin.
     * @path /families/{familyId}
     * @allow (create) Only the user creating the family can create it.
     * @allow (get) Any authenticated user can read family data.
     * @allow (update) Only the family admin can update the family.
     * @allow (delete) Only the family admin can delete the family.
     * @deny (create) Non-authenticated user cannot create family.
     * @deny (list) Listing families is not allowed.
     * @principle Enforces family ownership and admin control.
     */
    match /families/{familyId} {
      function isAdmin(familyId) {
        return get(/databases/$(database)/documents/families/$(familyId)).data.adminId == request.auth.uid;
      }

      allow get: if true;
      allow list: if false;

      allow create: if request.auth.uid != null;
      allow update: if isAdmin(familyId);
      allow delete: if isAdmin(familyId);
    }

    /**
     * @description Manages stories within a family, allowing family members to contribute and manage them.
     * @path /families/{familyId}/stories/{storyId}
     * @allow (create) Family members can create stories.
     * @allow (get, list) Any authenticated user can read or list stories.
     * @allow (update, delete) Only family members can update or delete stories.
     * @deny (create) Non-family members cannot create stories in this family.
     * @principle Enforces family-based access control for stories.
     */
    match /families/{familyId}/stories/{storyId} {
      function isFamilyMember(familyId) {
        return get(/databases/$(database)/documents/families/$(familyId)).data.memberIds.hasAny([request.auth.uid]);
      }

      allow get, list: if true;

      allow create: if request.auth.uid != null;
      allow update: if isFamilyMember(familyId) && resource != null;
      allow delete: if isFamilyMember(familyId) && resource != null;
    }

    /**
     * @description Manages Memora Box devices within a family.
     * @path /families/{familyId}/memoraBoxes/{boxId}
     * @allow (create) Family members can register new boxes.
     * @allow (get, list) Any authenticated user can read or list boxes.
     * @allow (update, delete) Only family members can update or delete boxes.
     * @deny (create) Non-family members cannot register boxes for this family.
     * @principle Enforces family-based access control for Memora Boxes.
     */
    match /families/{familyId}/memoraBoxes/{boxId} {
        function isFamilyMember(familyId) {
          return get(/databases/$(database)/documents/families/$(familyId)).data.memberIds.hasAny([request.auth.uid]);
        }

        allow get, list: if true;

        allow create: if request.auth.uid != null;
        allow update: if isFamilyMember(familyId) && resource != null;
        allow delete: if isFamilyMember(familyId) && resource != null;
    }

    /**
     * @description Allows public read access to donated stories.
     * @path /donatedStories/{donatedStoryId}
     * @allow (get, list) Any user can read donated stories.
     * @allow (create, update, delete) Only authenticated users can create, update, or delete donated stories.
     * @principle Provides public access to donated stories.
     */
    match /donatedStories/{donatedStoryId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation if needed.
    }
  }
}