rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) Authenticated user can access their own profile if the userId matches their auth UID.
     * @deny  (create, get, update, delete) Unauthorized user attempts to access another user's profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to family account information.
     * @path /families/{familyId}
     * @allow (create) Authenticated user can create a family if they are the admin. The 'adminId' field in the data must match the user's UID.
     * @allow (get) Authenticated user can read a family if they are a member of the family.
     * @allow (update, delete) Only the admin of the family can update or delete it.
     * @deny  (create, get, update, delete) Unauthorized user attempts to access or modify a family they are not a member of.
     * @principle Enforces family-ownership and admin control for family data.
     */
    match /families/{familyId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin(familyId) {
          return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/families/$(familyId)).data.adminId;
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.adminId == request.auth.uid;
        allow update: if isSignedIn() && request.resource.data.adminId == get(/databases/$(database)/documents/families/$(familyId)).data.adminId;
        allow delete: if isSignedIn() && request.resource.data.adminId == get(/databases/$(database)/documents/families/$(familyId)).data.adminId;
    }

    /**
     * @description Controls access to stories associated with a family.
     * @path /families/{familyId}/stories/{storyId}
     * @allow (create) Authenticated user can create a story if they are a member of the family, and the 'familyId' in the data matches the path.
     * @allow (get, list) Authenticated user can read stories if they are a member of the family.
     * @allow (update, delete) Only family members can update/delete stories.
     * @deny  (create, get, update, delete) Unauthorized user attempts to access or modify stories they are not authorized for.
     * @principle Enforces family-ownership for stories.
     */
    match /families/{familyId}/stories/{storyId} {
      function isSignedIn() {
          return request.auth != null;
      }

      // Check that the authenticated user is a member of the family.
      // This requires checking if the user's `familyId` matches the `familyId` of the story document.
      function isFamilyMember(familyId) {
          return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == familyId;
      }

      function isExistingFamilyMember(familyId) {
        return isFamilyMember(familyId) && resource != null;
      }

      allow get: if isFamilyMember(familyId);
      allow list: if isFamilyMember(familyId);
      allow create: if isSignedIn() && request.resource.data.familyId == familyId && isFamilyMember(familyId);
      allow update: if isExistingFamilyMember(familyId);
      allow delete: if isExistingFamilyMember(familyId);
    }

    /**
     * @description Controls access to Memora Box device information.
     * @path /memoraBoxes/{boxId}
     * @allow (get, list) Anyone can read Memora Box information.
     * @allow (create, update, delete) Only the application backend can create, update, or delete Memora Box information.
     * @deny  (create, update, delete) Unauthorized users attempts to modify Memora Box data.
     * @principle Restricts write access to Memora Box data to the application.
     */
    match /memoraBoxes/{boxId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to anonymized stories donated to the Estudia Memora community.
     * @path /donatedStories/{donatedStoryId}
     * @allow (get, list) Anyone can read donated stories.
     * @allow (create, update, delete) Only the application backend can create, update, or delete donated stories.
     * @deny  (create, update, delete) Unauthorized users attempts to modify donated stories.
     * @principle Public read access with restricted write access for donated stories.
     */
    match /donatedStories/{donatedStoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}