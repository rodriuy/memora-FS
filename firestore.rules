/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and a family-based access model for stories and MemoraBoxes.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the document ID matching the Firebase Auth UID.
 * - /families/{familyId}: Stores family account information.
 * - /families/{familyId}/stories/{storyId}: Stores stories associated with a family.
 * - /families/{familyId}/memoraBoxes/{boxId}: Stores information about Memora Box devices.
 * - /donatedStories/{donatedStoryId}: Stores anonymized stories donated to the Estudia Memora community.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Family data can only be accessed by family members.
 * - Donated stories are publicly readable.
 * - Listing of users or families is disallowed.
 *
 * Denormalization for Authorization:
 * - The `User` document has `familyId` which allows rules to enforce family-based access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create, update, get, delete) if the user's UID matches the document ID.
     * @deny (create, update, get, delete) if the user's UID does not match the document ID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure family accounts.  Rules for creating and modifying families should be further refined based on specific requirements.
     * @path /families/{familyId}
     * @allow  (get) if true; // TODO: Further restrict access based on family membership.
     * @deny  (create, update, delete) if false; // TODO: Implement family admin role for writes.
     * @principle Requires further refinement of access controls.
     */
    match /families/{familyId} {
       allow get: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == familyId;
       allow list: if false;
       allow create: if false; // TODO: Implement family admin role for writes.
       allow update: if false; // TODO: Implement family admin role for writes.
       allow delete: if false; // TODO: Implement family admin role for writes.
    }

    /**
     * @description Secure stories associated with a family. Access should be limited to members of the family.
     * @path /families/{familyId}/stories/{storyId}
     * @allow (get, list) if true; // TODO: Restrict listing to family members.
     * @deny (create, update, delete) if false; // TODO: Implement family member role check.
     * @principle Requires implementation of family-based access control.
     */
    match /families/{familyId}/stories/{storyId} {
       allow get: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == familyId;
       allow list: if false;
       allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == familyId;
       allow update: if false; // TODO: Implement family member role check.
       allow delete: if false; // TODO: Implement family member role check.
    }

    /**
     * @description Secure Memora Box devices associated with a family. Access should be limited to members of the family.
     * @path /families/{familyId}/memoraBoxes/{boxId}
     * @allow (get, list) if true; // TODO: Restrict listing to family members.
     * @deny (create, update, delete) if false; // TODO: Implement family member role check.
     * @principle Requires implementation of family-based access control.
     */
    match /families/{familyId}/memoraBoxes/{boxId} {
       allow get: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == familyId;
       allow list: if false;
       allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == familyId;
       allow update: if false; // TODO: Implement family member role check.
       allow delete: if false; // TODO: Implement family member role check.
    }

    /**
     * @description Allow public read access to donated stories.
     * @path /donatedStories/{donatedStoryId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     */
    match /donatedStories/{donatedStoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}