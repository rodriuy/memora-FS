/**
 * @description This ruleset enforces a family-centric data model where access to stories is controlled by family membership. Users can only create families and stories if they are authenticated and are the designated admin or a member of the family. Public read access is granted to donated stories, while other data is restricted to authorized users only.
 * @dataStructure
 *   - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase Auth UID.
 *   - /families/{familyId}: Stores family account information.
 *   - /families/{familyId}/stories/{storyId}: Stores stories associated with a family.
 *   - /memoraBoxes/{boxId}: Stores information about Memora Box devices.
 *   - /donatedStories/{donatedStoryId}: Stores anonymized stories donated to the Estudia Memora community.
 * @keySecurityDecisions
 *   - Strict ownership model for users and families.
 *   - Stories are secured via family membership, leveraging subcollections for path-based authorization.
 *   - Public read access to donated stories.
 *   - Listing of users is disallowed.
 *   - `create`, `update`, and `delete` operations MUST NEVER use `if true;`. All writes must be protected by an authorization check (e.g., `isOwner()`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, list, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (update, delete) - If the user does not exist.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Verified Identity: Only signed-in users can attempt any operations.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to family documents.
     * @path /families/{familyId}
     * @allow (create) - An authenticated user can create a family where they are the admin.
     * @allow (get, update, delete) - Only the admin of the family can access/modify the family document.
     * @deny (create) - If the adminId in the request data does not match the authenticated user's UID.
     * @deny (update, delete) - If the user is not the family admin or if the family does not exist.
     * @principle Enforces document ownership for writes and admin-only access.
     */
    match /families/{familyId} {
      allow get: if isSignedIn() && isAdmin(familyId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.adminId == request.auth.uid;
      allow update: if isSignedIn() && isExistingAdmin(familyId);
      allow delete: if isSignedIn() && isExistingAdmin(familyId);
    }

    /**
     * @description Controls access to stories within a family.
     * @path /families/{familyId}/stories/{storyId}
     * @allow (get, list) - Family members can read stories.
     * @allow (create) - Family members can create stories within their family.
     * @allow (update, delete) - Only the family admin can update or delete stories.
     * @deny (create) - If the familyId in the request data does not match the path.
     * @deny (update, delete) - If the user is not the family admin or if the story does not exist.
     * @principle Enforces family-based access control for stories.
     */
    match /families/{familyId}/stories/{storyId} {
      allow get: if isSignedIn() && isFamilyMember(familyId);
      allow list: if isSignedIn() && isFamilyMember(familyId);
      allow create: if isSignedIn() && isFamilyMember(familyId) && request.resource.data.familyId == familyId;
      allow update: if isSignedIn() && isExistingAdmin(familyId);
      allow delete: if isSignedIn() && isExistingAdmin(familyId);
    }

    /**
     * @description Controls access to MemoraBox documents.
     * @path /memoraBoxes/{boxId}
     * @allow (get) - Any authenticated user can read a MemoraBox document.
     * @allow (create) - Only authenticated users can create MemoraBox documents.
     * @allow (update, delete) - Only the family admin associated with the MemoraBox can update or delete it.
     * @deny (update, delete) - If the user is not the family admin or if the MemoraBox does not exist.
     * @principle Enforces family-based ownership for MemoraBoxes.
     */
    match /memoraBoxes/{boxId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isExistingBoxAdmin(boxId);
      allow delete: if isSignedIn() && isExistingBoxAdmin(boxId);
    }

    /**
     * @description Controls access to donated stories.
     * @path /donatedStories/{donatedStoryId}
     * @allow (get, list) - Public read access to donated stories.
     * @allow (create) - Only authenticated users can create donated stories.
     * @allow (update, delete) - No updates or deletes allowed.
     * @principle Provides public read access while restricting write access.
     */
    match /donatedStories/{donatedStoryId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    // **** Helper functions ****
    // Validates that the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Validates that the user is the owner of the document based on the userId.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    //Validates that the user is the owner of an existing document.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    // Validates that the user is the admin of the family.
    function isAdmin(familyId) {
      return get(/databases/$(database)/documents/families/$(familyId)).data.adminId == request.auth.uid;
    }

    // Validates that the user is the admin of the family for an existing family document.
    function isExistingAdmin(familyId) {
        return isAdmin(familyId) && resource != null;
    }

     // Validates that the user is a member of the family.
    function isFamilyMember(familyId) {
      return request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
    }

    // Validates that the user is the admin of the family associated with a Memora Box.
    function isBoxAdmin(boxId) {
      let familyId = get(/databases/$(database)/documents/memoraBoxes/$(boxId)).data.familyId;
      return get(/databases/$(database)/documents/families/$(familyId)).data.adminId == request.auth.uid;
    }

    // Validates that the user is the admin of the family associated with an existing Memora Box.
    function isExistingBoxAdmin(boxId) {
      return isBoxAdmin(boxId) && resource != null;
    }
  }
}