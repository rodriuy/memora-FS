/**
 * @file Firebase Security Rules for Memora App
 *
 * @description This ruleset enforces a strict, path-based authorization model
 * for the Memora application. It leverages data denormalization to avoid
 * costly `get()` calls and ensure efficient, secure access control.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the user.
 * - /families/{familyId}: Stores family account information.
 * - /families/{familyId}/stories/{storyId}: Stores stories belonging to a family.
 *   Each story includes a `familyId` field for authorization.
 * - /memoraBoxes/{boxId}: Stores Memora Box device information.
 * - /donatedStories/{donatedStoryId}: Stores anonymized stories available for public consumption.
 *
 * Key Security Decisions:
 * - User data is strictly private; only the authenticated user can access their own profile.
 * - Stories are secured within family subcollections, with access controlled by family membership.
 * - Public listing of stories is achieved via the separate `/donatedStories` collection.
 * - Data validation is minimal in this prototyping phase, focusing on authorization and relational integrity.
 * - Listing donated stories is allowed for all users, including unauthenticated ones.
 *
 * Denormalization for Authorization:
 * - Stories include a `familyId` field, denormalized from the parent `families` document,
 *   to enable authorization without requiring `get()` calls.
 *
 * Structural Segregation:
 * - Publicly accessible stories are stored in the `/donatedStories` collection, separate from
 *   private family stories, to simplify access control and optimize list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, accessible only to the authenticated user.
     * @path /users/{userId}
     * @allow (create) If the user's auth UID matches the userId in the document.
     * @allow (get, update, delete) If the user is the owner of the document.
     * @deny (create) If the user's auth UID does not match the userId.
     * @deny (get, update, delete) If the user is not the owner.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure family account information.
     * @path /families/{familyId}
     * @allow (create) Anyone can create family for prototyping
     * @allow (get) Anyone can get family for prototyping
     * @allow (update, delete) Need to be an existing family
     * @principle  Families are created by users to group stories and boxes.
     */
    match /families/{familyId} {
      allow get: if true;
      allow list: if false;
      allow create: if true;
      allow update: if request.auth.uid == resource.data.adminId && resource != null;
      allow delete: if request.auth.uid == resource.data.adminId  && resource != null;
    }

    /**
     * @description Secure stories within family subcollections.
     * @path /families/{familyId}/stories/{storyId}
     * @allow (get, list) Members of the family can read stories.
     * @allow (create) Members of the family can create stories.
     * @allow (update, delete) Only the owner family can modify stories.
     * @deny (get, list) Non-members cannot access stories.
     * @deny (create, update, delete) Non-owners cannot modify stories.
     * @principle Enforces family-based access control for stories.
     */
    match /families/{familyId}/stories/{storyId} {
        function isSignedIn() {
          return request.auth != null;
        }

        // Verify user is family member to view the stories.
        function isFamilyMember(familyId) {
          return request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
        }

        function isOwner(familyId) {
          return request.auth.uid == get(/databases/$(database)/documents/families/$(familyId)).data.adminId;
        }

        function isExistingOwner(familyId) {
            return isOwner(familyId) && resource != null;
        }
      allow get: if isSignedIn() && isFamilyMember(familyId);
      allow list: if isSignedIn() && isFamilyMember(familyId);
      allow create: if isSignedIn() && isFamilyMember(familyId);
      allow update: if isExistingOwner(familyId);
      allow delete: if isExistingOwner(familyId);
    }

    /**
     * @description Secure Memora Box device information.
     * @path /memoraBoxes/{boxId}
     * @allow (get, list) Everyone can read memoraBoxes for prototyping
     * @allow (create) Anyone can create memoraBoxes for prototyping
     * @allow (update, delete) Must be an existing memoraBox
     * @principle MemoraBoxes are linked to a family.
     */
    match /memoraBoxes/{boxId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if resource != null;
      allow delete: if resource != null;
    }

    /**
     * @description Secure anonymized stories donated to the community.
     * @path /donatedStories/{donatedStoryId}
     * @allow (get, list) Public read access to donated stories.
     * @allow (create, update, delete) Only the application can create, update, and delete donated stories.
     * @principle Allows public consumption of anonymized stories while restricting write access.
     */
    match /donatedStories/{donatedStoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add logic for backend to create
      allow update: if false; // TODO: Add logic for backend to update
      allow delete: if false; // TODO: Add logic for backend to delete
    }
  }
}