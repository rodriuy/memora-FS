/**
 * @fileoverview Firestore Security Rules for the Memora application.
 *
 * Core Philosophy:
 * This ruleset enforces a hierarchical data ownership model. Users have their profiles, families group users, and stories/devices belong to families.
 * Authorization decisions are made without additional `get()` calls by denormalizing data.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, where userId is the Firebase Auth UID.
 * - /families/{familyId}: Family accounts.
 * - /families/{familyId}/stories/{storyId}: Stories belonging to a family.  Each story denormalizes the familyId.
 * - /families/{familyId}/memoraBoxes/{boxId}: Memora Box devices linked to a family.
 * - /donatedStories/{donatedStoryId}: Publicly available, anonymized stories.
 *
 * Key Security Decisions:
 * - Users can only manage their own user documents.
 * - Family data access is restricted to family members.
 * - Stories and MemoraBoxes are only accessible to members of the associated family.
 * - Public read access is granted only to donated stories.
 * - Listing of user documents is disallowed.
 *
 * Denormalization for Authorization:
 * - Stories denormalize the familyId to enable direct authorization without needing to fetch the parent family document.
 *
 * Structural Segregation:
 * - Publicly readable donated stories are stored in a separate collection (/donatedStories) to avoid mixing access control concerns with private family stories.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @allow (get, update, delete) User can only access/modify their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (list) Listing user profiles is not allowed.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to family account documents.
     * @path /families/{familyId}
     * @allow (create) Any signed-in user can create a family.  The creator becomes the admin.
     * @allow (get) Any signed-in user can read family data.
     * @allow (update, delete) Only the family admin can modify/delete the family.
     * @deny (create) Mismatched family ID in create request.
     * @deny (list) Listing families is not allowed.
     * @principle Enforces family-level access control based on membership and admin status.
     */
    match /families/{familyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.adminId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.adminId;
    }

    /**
     * @description Controls access to story documents within a family.
     * @path /families/{familyId}/stories/{storyId}
     * @allow (get, list) Any member of the family can read stories.
     * @allow (create) Only family members can create stories. `familyId` in the new story data must match the path.
     * @allow (update, delete) Only family members can modify/delete stories. `familyId` must match.
     * @deny (create) `familyId` in the new story data does not match the path.
     * @principle Enforces family-ownership for stories.
     */
    match /families/{familyId}/stories/{storyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      //  Removed isFamilyMember() as it requires get() which is disallowed
      // function isFamilyMember(familyId) {
      //   return isSignedIn() && familyId in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
      // }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.familyId == familyId;
        allow update: if isSignedIn() && request.resource.data.familyId == familyId;
        allow delete: if isSignedIn() && request.resource.data.familyId == familyId;
    }

    /**
     * @description Controls access to Memora Box documents within a family.
     * @path /families/{familyId}/memoraBoxes/{boxId}
     * @allow (get, list) Any member of the family can read Memora Box data.
     * @allow (create) Only family members can create Memora Box entries. `familyId` in the new data must match.
     * @allow (update, delete) Only family members can modify/delete Memora Box entries. `familyId` must match.
     * @deny (create) `familyId` in the new Memora Box data does not match the path.
     * @principle Enforces family-ownership for Memora Boxes.
     */
    match /families/{familyId}/memoraBoxes/{boxId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Removed isFamilyMember() as it requires get() which is disallowed
      // function isFamilyMember(familyId) {
      //   return isSignedIn() && familyId in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
      // }

        allow get, list: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.familyId == familyId;
        allow update: if isSignedIn() && request.resource.data.familyId == familyId;
        allow delete: if isSignedIn() && request.resource.data.familyId == familyId;
    }

    /**
     * @description Controls access to donated story documents.
     * @path /donatedStories/{donatedStoryId}
     * @allow (get, list) Anyone can read donated stories.
     * @allow (create, update, delete) Only authenticated users can modify donated stories.
     * @principle Allows public read access to donated content, but restricts write access to authorized users.
     */
    match /donatedStories/{donatedStoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}