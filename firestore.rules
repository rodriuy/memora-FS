/**
 * @file Firestore Security Rules for Memora Application
 *
 * @core_philosophy: This ruleset enforces a strict ownership model for user data and a family-based access control model for shared resources like stories and MemoraBoxes. It prioritizes security through authorization independence, achieved by denormalizing authorization-related data to avoid costly `get()` calls.
 *
 * @data_structure:
 *   - /users/{userId}: Stores individual user profiles, with 'userId' matching the Firebase Auth UID.
 *   - /families/{familyId}: Stores family account information, including admin and member lists.
 *   - /families/{familyId}/stories/{storyId}: Stores stories associated with a family.
 *   - /families/{familyId}/memoraBoxes/{boxId}: Stores information about Memora Box devices linked to a family.
 *   - /donatedStories/{donatedStoryId}: Stores anonymized stories donated to the Estudia Memora community.
 *
 * @key_security_decisions:
 *   - User listing is disabled.
 *   - Family access is controlled through explicit membership (adminId and memberIds).
 *   - Stories and MemoraBoxes inherit access control from their parent Family document.
 *   - Donated stories are publicly readable.
 *
 * @denormalization_for_authorization: The 'stories' collection denormalizes the 'familyId' to enable direct authorization checks without additional reads.
 *
 * @structural_segregation: Publicly accessible donated stories are stored in a separate top-level collection (/donatedStories) to simplify access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @allow (get, update, delete) User with UID 'user123' can read/update/delete their own profile.
     * @deny (get, update, delete) User with UID 'user456' cannot read/update/delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to family account data.
     * @path /families/{familyId}
     * @allow (create) Any authenticated user can create a family account.
     * @deny (create) Unauthenticated users cannot create a family account.
     * @allow (get) Any authenticated user can read family account data.
     * @deny (list) Listing family accounts is not allowed.
     * @allow (update, delete) Only the family admin can update or delete family data.
     * @principle Restricts family management to the designated admin.
     */
    match /families/{familyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin(familyId) {
          return isSignedIn() && get(/databases/$(database)/documents/families/$(familyId)).data.adminId == request.auth.uid;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isAdmin(familyId);
      allow delete: if isSignedIn() && isAdmin(familyId);
    }

    /**
     * @description Controls access to stories associated with a family.
     * @path /families/{familyId}/stories/{storyId}
     * @allow (get, list) Any authenticated user can read/list stories within a family.
     * @deny (create) Only members of the family can create stories.
     * @allow (update, delete) Only the family admin can update or delete stories.
     * @principle Enforces family-based access control for stories.
     */
    match /families/{familyId}/stories/{storyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isFamilyMember(familyId) {
        return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.memberIds;
      }

      function isFamilyAdmin(familyId) {
        return isSignedIn() && get(/databases/$(database)/documents/families/$(familyId)).data.adminId == request.auth.uid;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isFamilyMember(familyId) && request.resource.data.familyId == familyId;
      allow update: if isSignedIn() && isFamilyAdmin(familyId);
      allow delete: if isSignedIn() && isFamilyAdmin(familyId);
    }

    /**
     * @description Controls access to Memora Box device information.
     * @path /families/{familyId}/memoraBoxes/{boxId}
     * @allow (get, list) Any authenticated user can read/list Memora Boxes within a family.
     * @deny (create, update, delete) Only family admins can create, update, or delete Memora Box data.
     * @principle Restricts Memora Box management to family administrators.
     */
    match /families/{familyId}/memoraBoxes/{boxId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isFamilyAdmin(familyId) {
        return isSignedIn() && get(/databases/$(database)/documents/families/$(familyId)).data.adminId == request.auth.uid;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && isFamilyAdmin(familyId) && request.resource.data.familyId == familyId;
      allow update: if isSignedIn() && isFamilyAdmin(familyId);
      allow delete: if isSignedIn() && isFamilyAdmin(familyId);
    }

    /**
     * @description Controls access to donated stories for public consumption.
     * @path /donatedStories/{donatedStoryId}
     * @allow (get, list) Any user (authenticated or not) can read/list donated stories.
     * @deny (create, update, delete) No one can create, update, or delete donated stories directly.
     * @principle Allows public read access to donated stories while preventing unauthorized modifications.
     */
    match /donatedStories/{donatedStoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}